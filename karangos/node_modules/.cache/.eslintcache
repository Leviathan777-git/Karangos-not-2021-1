[{"/workspace/Karangos-not-2021-1/karangos/src/index.js":"1","/workspace/Karangos-not-2021-1/karangos/src/App.js":"2","/workspace/Karangos-not-2021-1/karangos/src/reportWebVitals.js":"3","/workspace/Karangos-not-2021-1/karangos/src/ui/TopBar.js":"4","/workspace/Karangos-not-2021-1/karangos/src/ui/FooterBar.js":"5","/workspace/Karangos-not-2021-1/karangos/src/ui/MainMenu.js":"6","/workspace/Karangos-not-2021-1/karangos/src/routed/KarangosList.js":"7","/workspace/Karangos-not-2021-1/karangos/src/routed/KarangosForm.js":"8","/workspace/Karangos-not-2021-1/karangos/src/ui/ConfirmDialog.js":"9","/workspace/Karangos-not-2021-1/karangos/src/routed/KarangosList2.js":"10"},{"size":500,"mtime":1619565441000,"results":"11","hashOfConfig":"12"},{"size":2421,"mtime":1622596831000,"results":"13","hashOfConfig":"12"},{"size":362,"mtime":1619565441000,"results":"14","hashOfConfig":"12"},{"size":742,"mtime":1620173902000,"results":"15","hashOfConfig":"12"},{"size":1235,"mtime":1620172506000,"results":"16","hashOfConfig":"12"},{"size":1690,"mtime":1620177351000,"results":"17","hashOfConfig":"12"},{"size":7174,"mtime":1621383474056,"results":"18","hashOfConfig":"19"},{"size":12216,"mtime":1623190027211,"results":"20","hashOfConfig":"12"},{"size":1581,"mtime":1621377062000,"results":"21","hashOfConfig":"12"},{"size":6132,"mtime":1623190008702,"results":"22","hashOfConfig":"12"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"t1goty",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"y5ho5m",{"filePath":"37","messages":"38","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/workspace/Karangos-not-2021-1/karangos/src/index.js",[],"/workspace/Karangos-not-2021-1/karangos/src/App.js",[],"/workspace/Karangos-not-2021-1/karangos/src/reportWebVitals.js",[],"/workspace/Karangos-not-2021-1/karangos/src/ui/TopBar.js",[],"/workspace/Karangos-not-2021-1/karangos/src/ui/FooterBar.js",[],"/workspace/Karangos-not-2021-1/karangos/src/ui/MainMenu.js",[],"/workspace/Karangos-not-2021-1/karangos/src/routed/KarangosList.js",[],"/workspace/Karangos-not-2021-1/karangos/src/routed/KarangosForm.js",["44"],"import { useState, useEffect } from 'react'\nimport TextField from '@material-ui/core/TextField'\nimport MenuItem from '@material-ui/core/MenuItem'\nimport { makeStyles } from '@material-ui/core/styles'\nimport FormControl from '@material-ui/core/FormControl'\nimport FormControlLabel from '@material-ui/core/FormControlLabel'\nimport Checkbox from '@material-ui/core/Checkbox'\nimport InputMask from 'react-input-mask'\nimport InputAdornment from '@material-ui/core/InputAdornment'\nimport Toolbar from '@material-ui/core/Toolbar'\nimport Button from '@material-ui/core/Button'\nimport axios from 'axios'\nimport Snackbar from '@material-ui/core/Snackbar';\nimport MuiAlert from '@material-ui/lab/Alert';\nimport { useHistory, useParams } from 'react-router-dom'\nimport ConfirmDialog from '../ui/ConfirmDialog'\n\nconst useStyles = makeStyles(() => ({\n  form: {\n    maxWidth: '80%',\n    margin: '0 auto',\n    display: 'flex',\n    justifyContent: 'space-around',\n    flexWrap: 'wrap',\n    '& .MuiFormControl-root': {\n      minWidth: '200px',\n      maxWidth: '500px',\n      marginBottom: '24px',\n    }\n  },\n  toolbar: {\n    marginTop: '36px',\n    width: '100%',\n    display: 'flex',\n    justifyContent: 'space-around'\n  },\n  checkbox: {\n    alignItems: 'center'\n  }\n}))\n\n/* Classes de caracteres de entrada para a máscara do campo placa \n  1) Três primeiras posições: qualquer letra, de A a Z (maiúsculo ou minúsculo) ~> [A-Za-z]\n  2) Posições numéricas (1ª, a 3ª e a 4ª depois do traço) ~> [0-9]\n  3) 2º posição após o traço: pode receber dígitos ou letras de A a J (maiúsculas ou minúsculas) ~> [0-9A-Ja-j]\n*/\n\n// Representando as classes de caracteres da máscara como um objeto\nconst formatChars = {\n  'A': '[A-Za-z]',\n  '0': '[0-9]',\n  '#': '[0-9A-Ja-j]'\n}\n\n// Finalmente, a máscara de entrada do campo placa\nconst placaMask = 'AAA-0#00'\n\n// Máscara para CPF: '000.000.000-00'\n// Máscara para CNPJ: '00.000.000/0000-00'\n\nexport default function KarangosForm() {\n  const classes = useStyles()\n\n  const [karango, setKarango] = useState({\n    id: null,\n    marca: '',\n    modelo: '',\n    cor: '',\n    ano_fabricacao: (new Date()).getFullYear(), // Ano corrente\n    importado: '0',\n    placa: '',\n    preco: 0\n  })\n  \n  const [importadoChecked, setImportadoChecked] = useState()\n\n  const [snackState, setSnackState] = useState({\n    open: false,\n    severity: 'success',\n    message: 'Karango salvo com sucesso'  \n  })\n\n  const [btnSendState, setBtnSendState] = useState({\n    disabled: false,\n    label: 'Enviar'\n  })\n\n  const [error, setError] = useState({\n    marca: '',\n    modelo: '',\n    cor: '',\n    placa: '',\n    preco: ''\n  })\n\n  const [isModified, setIsModified] = useState(false)\n\n  const [dialogOpen, setDialogOpen] = useState(false)\n\n  const [title, setTitle] = useState('Cadastrar Novo Karango')\n\n  const history = useHistory()\n  const params = useParams()\n\n  useEffect(() => {\n    // Verifica se tem o parâmetro id na rota. Se tiver, temos que buscar\n    // os dados do registro no back-end para edição\n    if(params.id) {\n      setTitle('Editando Karango')\n      getData(params.id)\n    }\n  }, [])\n\n  async function getData(id) {\n    try {\n      let response = await axios.get(`https://api.faustocintra.com.br/karangos/${id}`)\n      setKarango(response.data)    \n    }\n    catch(error) {\n      setSnackState({\n        open: true,\n        severity: 'error',\n        message: 'Não foi possível carregar os dados para edição.'\n      })\n    }\n  } \n\n  function handleInputChange(event, property) {\n    \n    const karangoTemp = {...karango}\n    let importadoCheckedTemp = importadoChecked\n\n    // Se houver id no event.target, ele será o nome da propriedade\n    // senão, usaremos o valor do segundo parâmetro\n    if(event.target.id) property = event.target.id\n\n    if(property === 'importado') {\n      const newState = ! importadoChecked\n      //setKarango({...karango, importado: (newState ? '1': '0')})\n      karangoTemp.importado = (newState ? '1': '0')\n      //setImportadoChecked(newState)\n      importadoCheckedTemp = newState\n    }\n    else if(property === 'placa') {\n      //setKarango({...karango, [property]: event.target.value.toUpperCase()}) \n      karangoTemp[property] = event.target.value.toUpperCase()\n    }\n    else {\n      // Quando o nome de uma propriedade de um objeto aparece entre [],\n      // isso se chama \"propriedade calculada\". O nome da propriedade vai\n      // corresponder à avaliação da expressão entre os colchetes\n      //setCurrentId(event.target.id)\n      //setKarango({...karango, [property]: event.target.value})\n      karangoTemp[property] = event.target.value\n    }\n    setKarango(karangoTemp)\n    setImportadoChecked(importadoCheckedTemp)\n    setIsModified(true)   // O formulário foi modificado\n    validate(karangoTemp)     // Dispara a validação\n  }\n\n  function validate(data) {\n\n    const errorTemp = {\n      marca: '',\n      modelo: '',\n      cor: '',\n      placa: '',\n      preco: ''\n    }\n    let isValid = true\n\n    // trim(): retira espaços em branco do início e do final de uma string\n\n    // Validação do campo marca\n    if(data.marca.trim() === '') {\n      errorTemp.marca = 'A marca deve ser preenchida'\n      isValid = false\n    }\n\n    // Validação do campo modelo\n    if(data.modelo.trim() === '') {\n      errorTemp.modelo = 'O modelo deve ser preenchido'\n      isValid = false\n    }\n\n    // Validação do campo cor\n    if(data.cor.trim() === '') {\n      errorTemp.cor = 'Escolha uma cor'\n      isValid = false\n    }\n\n    // Validação do campo placa\n    // Valor válido não pode ser string vazia nem conter o caractere _\n    if(data.placa.trim() === '' || data.placa.includes('_')) {\n      errorTemp.placa = 'A placa deve ser corretamente preenchida'\n      isValid = false\n    }\n\n    // Validação do campo preco\n    // Valor válido deve ser numérico e maior do que zero\n    if(isNaN(data.preco) || Number(data.preco) <= 0) {\n      errorTemp.preco = 'O preço deve ser prenchido e maior que zero'\n      isValid = false  \n    }\n\n    setError(errorTemp)\n    return isValid\n\n  }\n\n  function years() {\n    let result = []\n    for(let i = (new Date()).getFullYear(); i >= 1900; i--) result.push(i)\n    return result\n  }\n\n  async function saveData() {\n    try {\n      // Desabilitar o botão Enviar\n      setBtnSendState({disabled: true, label: 'Enviando...'})\n\n      // Se o registro já existe (edição, verbo HTTP PUT)\n      if(params.id) await axios.put(`https://api.faustocintra.com.br/karangos/${params.id}`, karango)\n      // Registro não existe, cria um novo (verbo HTTP POST)\n      else await axios.post('https://api.faustocintra.com.br/karangos', karango)\n      \n      setSnackState({\n        open: true,\n        severity: 'success',\n        message: 'Karango salvo com sucesso!'  \n      })\n      \n    }\n    catch(error) {\n      setSnackState({\n        open: true,\n        severity: 'error',\n        message: 'ERRO: ' + error.message  \n      })  \n    }\n    // Reabilitar o botão Enviar\n    setBtnSendState({disabled: false, label: 'Enviar'})\n  }\n\n  function handleSubmit(event) {\n    \n    event.preventDefault() // Evita o recarregamento da página\n\n    // Só salva os dados se eles forem válidos\n    if(validate(karango)) saveData()\n    \n  }\n\n  function Alert(props) {\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\n  }\n\n  function handleSnackClose(event, reason) {\n    // Evita que a snackbar seja fechada clicando-se fora dela\n    if(reason === 'clickaway') return\n    setSnackState({...snackState, open: false}) // Fecha a snackbar\n\n    // Retorna à página de listagem\n    history.push('/list')   // Retorna à página de listagem\n  }\n\n  function handleDialogClose(result) {\n    setDialogOpen(false)\n\n    // Se o usuário concordou em voltar\n    if(result) history.push('/list')\n  }\n\n  function handleGoBack() {\n    // Se o formulário estiver modificado, mostramos o diálogo de confirmação\n    if(isModified) setDialogOpen(true)\n    // Senão, voltamos diretamente à página de listagem\n    else history.push('/list')\n  }\n\n  return (\n    <>\n      <ConfirmDialog isOpen={dialogOpen} onClose={handleDialogClose}>\n        Há dados não salvos. Deseja realmente voltar?\n      </ConfirmDialog>\n\n      <Snackbar open={snackState.open} autoHideDuration={6000} onClose={handleSnackClose}>\n        <Alert onClose={handleSnackClose} severity={snackState.severity}>\n          {snackState.message}\n        </Alert>\n      </Snackbar>\n      \n      <h1>{title}</h1>\n      <form className={classes.form} onSubmit={handleSubmit}>\n        \n        <TextField \n          id=\"marca\" \n          label=\"Marca\" \n          variant=\"filled\" \n          value={karango.marca} \n          onChange={handleInputChange} \n          fullWidth\n          required\n          error={error.marca !== ''}\n          helperText={error.marca} \n        />\n        \n        <TextField \n          id=\"modelo\" \n          label=\"Modelo\" \n          variant=\"filled\" \n          value={karango.modelo} \n          onChange={handleInputChange} \n          fullWidth\n          required\n          error={error.modelo !== ''}\n          helperText={error.modelo} \n        />\n\n        <TextField \n          id=\"cor\" \n          label=\"Cor\" \n          variant=\"filled\" \n          value={karango.cor} \n          onChange={event => handleInputChange(event, 'cor')} \n          select \n          fullWidth\n          required\n          error={error.cor !== ''}\n          helperText={error.cor} \n        >\n          <MenuItem value=\"Amarelo\">Amarelo</MenuItem>\n          <MenuItem value=\"Azul\">Azul</MenuItem>\n          <MenuItem value=\"Bege\">Bege</MenuItem>\n          <MenuItem value=\"Branco\">Branco</MenuItem>\n          <MenuItem value=\"Cinza\">Cinza</MenuItem>\n          <MenuItem value=\"Dourado\">Dourado</MenuItem>\n          <MenuItem value=\"Laranja\">Laranja</MenuItem>\n          <MenuItem value=\"Marrom\">Marrom</MenuItem>\n          <MenuItem value=\"Prata\">Prata</MenuItem>\n          <MenuItem value=\"Preto\">Preto</MenuItem>\n          <MenuItem value=\"Roxo\">Roxo</MenuItem>\n          <MenuItem value=\"Verde\">Verde</MenuItem>\n          <MenuItem value=\"Vermelho\">Vermelho</MenuItem>        \n        </TextField>\n\n        <TextField id=\"ano_fabricacao\" label=\"Ano de Fabricacao\" variant=\"filled\" value={karango.ano_fabricacao} onChange={event => handleInputChange(event, 'ano_fabricacao')} select fullWidth>\n          { years().map(year => <MenuItem value={year} key={year}>{year}</MenuItem>) }\n        </TextField>\n\n        <TextField \n          id=\"preco\" \n          label=\"Preço\" \n          variant=\"filled\" \n          value={karango.preco} \n          onChange={handleInputChange} \n          fullWidth \n          type=\"number\"\n          onFocus={event => event.target.select()} \n          InputProps={{\n            startAdornment: <InputAdornment position=\"start\">R$</InputAdornment>,\n          }}\n          required\n          error={error.preco !== ''}\n          helperText={error.preco} \n        />\n\n        <InputMask \n          formatChars={formatChars} \n          mask={placaMask} \n          id=\"placa\" \n          onChange={event => handleInputChange(event, 'placa')} \n          value={karango.placa}\n        >\n          {() => <TextField \n            label=\"Placa\" \n            variant=\"filled\" \n            fullWidth \n            required\n            error={error.placa !== ''}\n            helperText={error.placa} \n          />}\n        </InputMask>\n\n        <FormControl className={classes.checkbox} fullWidth>\n          <FormControlLabel\n            control={<Checkbox checked={importadoChecked} onChange={handleInputChange} id=\"importado\" />}\n            label=\"Importado?\"\n          />\n        </FormControl>\n\n        <Toolbar className={classes.toolbar}>\n          <Button \n            variant=\"contained\" \n            color=\"secondary\" \n            type=\"submit\"\n            disabled={btnSendState.disabled}\n          >\n              {btnSendState.label}\n          </Button>\n          <Button variant=\"contained\" onClick={handleGoBack}>\n            Voltar\n          </Button>\n        </Toolbar>\n            \n        {/* <div>{JSON.stringify(karango)}<br />currentId: {currentId}</div> */}\n      </form>\n    </>\n  )\n}","/workspace/Karangos-not-2021-1/karangos/src/ui/ConfirmDialog.js",[],"/workspace/Karangos-not-2021-1/karangos/src/routed/KarangosList2.js",[],{"ruleId":"45","severity":1,"message":"46","line":112,"column":6,"nodeType":"47","endLine":112,"endColumn":8,"suggestions":"48"},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'params.id'. Either include it or remove the dependency array.","ArrayExpression",["49"],{"desc":"50","fix":"51"},"Update the dependencies array to be: [params.id]",{"range":"52","text":"53"},[3093,3095],"[params.id]"]